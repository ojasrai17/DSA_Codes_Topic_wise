🧠 Full Step-by-Step Logic + Purpose Behind Each Line:
🟩 HashMap<Integer, Integer> basket = new HashMap<>();
Purpose: To track how many fruits of each type are in the current window.

Why it's needed: Helps us count and later remove a fruit type when we exceed the allowed 2 types.

🟩 int left = 0, right = 0, maxLen = 0;
left, right: Window boundaries.

maxLen: Stores the maximum length of a valid window found so far.

🟦 while (right < fruits.length)
Loop through the array using a sliding window approach.

right pointer expands the window.

🟦 int fruit = fruits[right];
Pick the current fruit at right pointer.

🟦 basket.put(fruit, basket.getOrDefault(fruit, 0) + 1);
Add the fruit to the basket.

If it's already there, increment the count.

Why: This allows us to track how many of each fruit type we have inside the current window.

🟥 while (basket.size() > 2)
If we now have more than two fruit types in the window, it's invalid.

Why: You only have two baskets — more than two types violates the constraint.

🟥 Inside the inner while loop:
🔸 int leftFruit = fruits[left];
Get the fruit at the start of the window (left end).

🔸 basket.put(leftFruit, basket.get(leftFruit) - 1);
Decrease its count, because we’re about to shrink the window from the left.

🔸 if (basket.get(leftFruit) == 0) basket.remove(leftFruit);
If the fruit's count becomes zero, remove it from the map.

Why: It means we have completely removed this fruit type from the current window.

🔸 left++;
Move the left boundary forward to make the window valid again.

🟨 maxLen = Math.max(maxLen, right - left + 1);
Update the maximum window length only when the window is valid (i.e., has ≤ 2 fruit types).

🟨 right++;
Move the right pointer to expand the window.

🟩 return maxLen;
Return the longest window found.

🧪 Example Dry Run
Input:

fruits = [1, 2, 1, 2, 3]
Step-by-step:
Window (left to right)	Basket Map	Valid?	maxLen
[1]	{1=1}	✅	1
[1,2]	{1=1, 2=1}	✅	2
[1,2,1]	{1=2, 2=1}	✅	3
[1,2,1,2]	{1=2, 2=2}	✅	4
[1,2,1,2,3] → size=3!	{1=2, 2=2, 3=1}	❌	shrink

After shrinking:

Remove fruit at left=0 (1), basket = {1=1, 2=2, 3=1}

Remove fruit at left=1 (2), basket = {1=1, 2=1, 3=1}

Remove fruit at left=2 (1), basket = {2=1, 3=1} ✅ valid

Window is now [2, 3] → size = 2
So final maxLen = 4

🔍 Why Each Condition Is Needed
Code/Condition	Why It's Important
basket.size() > 2	Enforces the 2-basket limit constraint
basket.getOrDefault(...)+1	Prevents NullPointerException and maintains correct count
if (basket.get(...) == 0)	Removes fruit types with zero count to free up space for a new type
left++	Shrinks the window so we can check the next valid subarray
Math.max(maxLen, ...)	Continuously tracks the longest valid window

✅ Time and Space Complexity
Time Complexity: O(n)
Each fruit is processed once by right and once by left → linear time.

Space Complexity: O(1)
At most 3 keys in the map at any time (because we remove when a count becomes 0).

📌 Edge Cases
1. All same fruit:

Input: [2,2,2,2]
Output: 4
2. All unique fruits:

Input: [1,2,3,4]
Output: 2 (any two adjacent fruits)
3. Alternating two fruits:

Input: [1,2,1,2,1,2]
Output: 6
